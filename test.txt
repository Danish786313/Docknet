update and delete by params

Docter

profile picture.
Degree.
identitycard
upload logo
Address
clinic licence
Achievements
video
region
Bank details



My Apointments(Request/Cancelled/Upcoming/Emergency/reshedule/completed);15/video/chat    patient_id
*Emergency slots
*Note
*prescription  (Name/Speciality/Date/Phonenumber/EmailID/Address/Logo/QR Code/Signature)
*My patients


My availability: days/date   Laboratory/ Pharmacy/ CNAM

Payment
*payment week


Email and Push notification




Patient
*Populer docters
*Phone 

Acount setting
List of docters
Book apointment (docter apointment time comes from docter availability)
*Book apointmets


Payment.

My consultations (Request/cancelled/Upcoming/Reshedule/Completed/Start Consultations)
Category
*Banners
*search docter
*stars
*Convinient slots
*Allergies.
*Health record history
*Duplicate profile
*Commission
*My Availability


*Ui Reshedule
*Docter as patient







==================================  APIs discossion ==============================
-> Docter
                Name
                Profile picture (upload)
                Degree
                Mobile number
                Email ID 
                password  (enter twice)
                Doctor will click “Next” button after entering the above information & fill out the appeared form having below the fields as mentioned below:

Question: Are you registration for any of the 3 specialities (Pharmacy/Lab oratory/CNAM) (select Yes/ No from the drop-down) 

Identity Card (upload front & back)
Doctor License (upload front & back)
Upload logo (this logo would be appeared on the top of the prescriptions released by the doctor)
Name & address of clinic
Clinic license (upload front & back)
Number of years into practice
Achievements (if any)
                     Read terms & conditions & click “Agree” button
Upload/ edit profile picture 
Upload Introductory Video (length of the video must be at least 1 minute)
Select speciality from drop-down
Select region from drop-down
Enter Bank details
Consultancy Charges: Doctors can set/ edit consultancy charges.
Terms & Conditions (user can view the terms and conditions as agreed while registration)

-> Patient
               name,
               picture, 
               mobile number, 
DoB,
Gender, 
Read terms & conditions & click “Agree” button
            email ID
                password 


Tables
-> User
-> Docter_profile
-> Availability    (docter_id, click_button, time, day, date)
-> health_history
-> Consultation    ( Junction tablr with patient_id, docter_id, apointment_id )
   fields (Age, Full_name, date, time, status, )





techlead
jira

//    Docter migrattion ///
 npx sequelize-cli model:generate --name docter --attributes fullName:string,gender:enum:'{Male,female,Other}',email:string,password:string,photo:string,degree:string,isPharmacist:boolean,clinicName:string,clinicAddress:string,experience:integer,achivement:string,speciality:string,region:string,bank_details:string,consultCharge:integer

//    Docter Info   //
npx sequelize-cli model:generate --name docterInfo --attributes introVideo:string,licenseFront:string,licenseBack:string,identityCardFront:string,identityCardBack:string,clinicLicenseFront:string,clinicLicenceBack:string

// patient Info //


// appointment Info //
npx sequelize-cli model:generate --name appointment --attributes date:date,time:date,patient_name:string,age:integer,gender:enum:'{Male,female,Other}',problem_desc:text,status:enum:'{Request,Cancelled,Upcoming,Reshedule,Emergency,Completed}'

// banner //
npx sequelize-cli model:generate --name banner --attributes image:string,link:integer

// speciality //
npx sequelize-cli model:generate --name speciality --attributes speciality:string,commission:integer

// availability //
npx sequelize-cli model:generate --name availability --attributes docter_id:integer,available:boolean,morning_start:date,morning_end:date,evening_start:date,evening_end:date,emergency:boolean,slots:date,slot_duration:date


// slots //
npx sequelize-cli model:generate --name slots --attributes morning_slots:date,isBooked:boolean,evening_slots:date,isBooked:boolean,


var Otp = Math.floor((Math.random() * 1000000) + 1)
console.log(Otp)


var now = moment();
var time = now.hour() + ':' + now.minutes() + ':' + now.seconds();
console.log(time);

time = time + ((now.hour()) >= 12 ? ' PM' : ' AM');
console.log(time);


setTimeout(async () => {
                        console.log("Delayed for 1 second.");
                      }, 1000)
console.log("dans")


Request -> Cancelled -> myApointments -> Aproveapointment -> Upcomingapointment

<p>Your Brand Inc</p>
            <p>1600 Amphitheatre Parkway</p>
            <p>California</p>


http://localhost:5000/api/users?page=2&limit=10
http://localhost:5000/api/users
http://localhost:5000/api/users?limit=10
http://localhost:5000/api/users?page=2

 const limit = _limit? +_limit : 20;
    const offset = _page? _page * limit : 0;
    const data = await _model.find().skip(offset).limit(limit);
    return { limit, offset, data };


SELECT A.name, A.phone, A.parent_id, B.parent_id FROM `patients` as A INNER join patients as B ON A.id = B.parent_id;


npx sequelize-cli model:generate --name slots --attributes docter_id:integer,name:string,branchName:string,ifscCode:string,accountNo:string,accountType:enum:'{Current, Saving}'

npx sequelize-cli model:generate --name slot --attributes availability_id:integer,start:date,end:date,slots:json

 let apointment = await docter_patient_appointment.findOne({where: {apointment_id: 3}, include: [{model: docter}]})
        res.send(apointment)
        // let apointment = await appointment.findOne({where: {id: 3}}, {
        //     include: [{model: payment}, {model: patient}, {model: docter}]
        // })
        // res.send(apointment)
        return


// console.log(req.profile.docterInfo/* .logo.split('/').slice(-1).toString() */)


   
    // doc.image(path.join(__dirname, '../upload/1676463202488.png'), 50, 45, { width: 50 })
    //     .fillColor('#444444')
    //     .fontSize(20)
    //     .text('ACME Inc.', 110, 57)
    //     .fontSize(10)
    //     .text('123 Main Street', 200, 65, { align: 'right' })
    //     .text('New York, NY, 10025', 200, 80, { align: 'right' })
    //     .moveDown();
     const distanceMargin = 18;
     squre
    doc
        .fillAndStroke('#0e8cc3')
        .lineWidth(20)
        .lineJoin('round')
        .rect(
            distanceMargin,
            distanceMargin,
            doc.page.width - distanceMargin * 2,
            doc.page.height - distanceMargin * 2,
            )
            .stroke();


//  Prescription setting  //
npx sequelize-cli model:generate --name prescription_setting --attributes logo:json,name:json,speciality:json,title:json,cname:json,email:json,address:json,phone:json,patient:json,date:json,description:json



{
    "logo": {
        "horizonAlign": 50,
        "verticalAlign":  45,
        "width": 100,
        "heigth": 100
    },
    "qrCode": {
        "horizonAlign": 460,
        "verticalAlign":  45,
        "width": 100,
        "heigth": 100
    },
    "name": "Danish khan",
    "speciality": "Dentist",
    "title": "Prescription",
    "cname": "084cdj@139",
    "email": "Danishkhan123@gmail.com",
    "address": "H No.2 Aishbagh Bhopal madhya pradesh",
    "phone": "765083458",
    "patient": "Antonio",
    "description":  "A Prescription is a written document from a Registered Medical Practitioner or other licensed practitioner, such as Dentist, with instructions to the pharmacist for dispensing a specific type and quantity of medication to a patient. A prescription is an important document for establishing a diagnosis, starting the treatment, tracking the recovery and determining future treatment path of the patient. Therefore, it is very important that you understand what all a valid prescription should have.",
       
    "signature": {
        "horizonAlign": 460,
        "verticalAlign":  680,
        "width": 100,
        "heigth": 100
    }
}

/// pay load data
{
    "logo": {
        "horizonAlign": 50,
        "verticalAlign":  45,
        "width": 100,
        "heigth": 100
    },
    "qrCode": {
        "horizonAlign": 460,
        "verticalAlign":  45,
        "width": 100,
        "heigth": 100
    },
    "name": {
        "width": 50,
        "height": 190,
        "color": "skyblue",
        "font": "Times-Italic",
        "fontSize": 24
    },
    "speciality": {
        "width": 50,
        "height": 215,
        "color": "black",
        "font": "Courier",
        "fontSize": 14
    },
    "title": {
        "titleName": "Prescription",
        "width": 210,
        "height": 45,
        "color": "#0e8cc3",
        "font": "Courier-Bold",
        "fontSize": 24
    },
    "cname": {
        "cname": "084cdj@139",
        "width": 260,
        "height": 70,
        "color": "black",
        "font": "Courier",
        "fontSize": 10
    },
    "email": {
        "width": 360,
        "height": 190,
        "color": "black",
        "font": "Courier",
        "fontSize": 12
    },
    "address": {
        "width": 360,
        "height": 210,
        "color": "black",
        "font": "Courier",
        "fontSize": 12
    },
    "phone": {
        "width": 360,
        "height": 200,
        "color": "black",
        "font": "Courier",
        "fontSize": 12
    },
    "patient": {
        "patientName": "Antonio",
        "width": 50,
        "height": 280,
        "color": "black",
        "font": "Courier",
        "fontSize": 20
    },
    "date": {
        "width": 50,
        "height": 670,
        "color": "black",
        "font": "Courier",
        "fontSize": 16
    },
    "line": {
        "height": 250,
        "start": 50,
        "end": 565,
        "color": "021c27" 
    },
    "description": {
        "descriptionNote" : "A Prescription is a written document from a Registered Medical Practitioner or other licensed practitioner, such as Dentist, with instructions to the pharmacist for dispensing a specific type and quantity of medication to a patient. A prescription is an important document for establishing a diagnosis, starting the treatment, tracking the recovery and determining future treatment path of the patient. Therefore, it is very important that you understand what all a valid prescription should have.",
        "width": 50,
        "height": 320,
        "color": "black",
        "font": "Courier",
        "fontSize": 14
    },
    "signature": {
        "horizonAlign": 460,
        "verticalAlign":  680,
        "width": 100,
        "heigth": 100
    }
}


// review 
npx sequelize-cli model:generate --name review --attributes patient_id:integer,docter_id:integer,stars:integer

 param() // when we omit fields, then we're getting all fields inside req.params
    .custom(params => { // here we ignore the second parameter { req, location, path }
        console.log(params) // { id: '10', idItem: '20' }
    })

    exports.create = function (req, res) {
    req.assert('name', 'Name cannot be blank').notEmpty();
    req.assert('email', 'Email is not valid').isEmail();
    req.assert('password', 'Password cannot be blank').notEmpty();
    req.assert('password', 'Password must be at least 8 chars long').isLength({ min: 8 });

    const errors = req.validationErrors();

    if (errors) {
        return res.status(200).send(errors);
    }
    req.body.password = bcrypt.hashSync(req.body.password, 10);
    var model = new Admin(req.body);
    model.save(function (err, admin) {
        if (err) {
            res.status(500).send({ error: err });
            return;
        } else {
            res.status(200).send(admin);
        }
    });
};

 // this.hasOne(models.patient, {as: 'child', foreignKey: 'parent_id'})
      // this.belongsTo(models.patient, {as:'parent', foreignKey: 'parent_id'});

      exports.createslots = async (req, res) => {
    try {
        let start = moment(req.body.start, ['h:m a', 'H:m'])
        let end = moment(req.body.end, ['h:m a', 'H:m'])
        let slots = []
        while (true) { 
            if (start.isBefore(end)) {
                slots.push(start.format('HH:mm'))
                start.add(parseInt(req.body.period), 'm')
            } else {
                slots.push(start.format('HH:mm'))
                break
            }
        }
        post = {
            docter_id : req.profile.id,
            start: moment(req.body.start, ['h:m', 'H:m']).format(),
            end: moment(req.body.end, ['h:m', 'H:m']).format(),
            slots: slots,
        }
        let data = await slottime.create(post)
        if (data) {
            return Response.successResponseWithoutData(
                res,
                SUCCESS,
                "SuccessFully creaed slot.",
                req
            )
        } else {
            return Response.errorResponseWithoutData(
                res,
                FAIL,
                "Error while creating slot.",
                req,
            )
        }
    } catch (err) {
        return Response.errorResponseWithoutData(
            res,
            FAIL,
            "Somethoong went wrong while creating slot.",
            req,
        )
    }
}
 "period": "30"
 let slots = []
        while (true) { 
            if (start.isBefore(end)) {
                slots.push(start.format('HH:mm'))
                start.add(parseInt(req.body.period), 'm')
            } else {
                slots.push(start.format('HH:mm'))
                break
            }
        }


 "dialectOptions": {
      "useUTC": false, 
      "dateStrings": true,
      "typeCast": true
}

 attributes: { exclude: ['password'] },